@using LSSD.Bookings

@code {
    [Inject]
    BookingService _bookingService { get; set; }

    [Parameter]
    public Resource resource { get; set; }

    [Parameter]
    public int Year { get; set; }

    [Parameter]
    public int Month { get; set; }

    [Parameter]
    public DateTime Today { get; set; }

    [Parameter]
    public int BookingWindowDays { get; set; }


    DateTime _startDate;

    Dictionary<int, List<SingleBooking>> bookingsThisMonth = new Dictionary<int, List<SingleBooking>>();

    protected override void OnInitialized()
    {
        _startDate = new DateTime(Year, Month, 1);

        ReloadBookings();
    }

    protected void OnClick_PrevMonth() {
        _startDate = _startDate.AddMonths(-1);
        ReloadBookings();
    }

    protected void OnClick_NextMonth() {
        _startDate = _startDate.AddMonths(1);
        ReloadBookings();
    }

    protected void ReloadBookings() {
        bookingsThisMonth.Clear();

        // Load bookings for given month
        List<SingleBooking> raw_bookingsthismonth = _bookingService.Find(x =>
            x.ResourceGUID == resource.Id &&
            x.BookingDate.Year == _startDate.Year &&
            x.BookingDate.Month == _startDate.Month &&
            x.IsCancelled == false
            ).ToList();

        // Sort by day
        foreach(SingleBooking booking in raw_bookingsthismonth) {
           if(!bookingsThisMonth.ContainsKey(booking.BookingDate.Day)) {
               bookingsThisMonth.Add(booking.BookingDate.Day, new List<SingleBooking>());
           }
           bookingsThisMonth[booking.BookingDate.Day].Add(booking);
        }
    }

}

@{
    int dayCounter = ((int)_startDate.DayOfWeek * -1) + 1;
    DateTime bookingWindowCutoffDate = BookingWindowDays > 0 ? Today.AddDays(BookingWindowDays) : DateTime.MaxValue;
}

<div class="calendar_container">
    <div class="calendar_heading">
        <div class="calendar_nav_buttons">
            <button class="btn btn-link" @onclick="OnClick_PrevMonth">Previous Month</button>
            <button class="btn btn-link" @onclick="OnClick_NextMonth">Next Month</button>
        </div>
    <b>@(Helpers.MonthName(_startDate.Month)), @(_startDate.Year)</b>
    </div>
    <br/>
    <div class="calendar_month">
    <div class="calenday_month_day_name">Sunday</div>
    <div class="calenday_month_day_name">Monday</div>
    <div class="calenday_month_day_name">Tuesday</div>
    <div class="calenday_month_day_name">Wednesday</div>
    <div class="calenday_month_day_name">Thursday</div>
    <div class="calenday_month_day_name">Friday</div>
    <div class="calenday_month_day_name">Saturday</div>

    @while(dayCounter <= DateTime.DaysInMonth(_startDate.Year, _startDate.Month))
    {
        for(int x = 0; x < 7; x++)
        {
            @if ((dayCounter > 0) && (dayCounter <= DateTime.DaysInMonth(_startDate.Year, _startDate.Month)))
            {
                bool isToday = ((Today.Year == _startDate.Year) && (Today.Month == _startDate.Month) && (Today.Day == dayCounter));
                DateTime thisDay = new DateTime(_startDate.Year, _startDate.Month, dayCounter);
                bool isWithinBookingWindow = (thisDay >= Today.Date) && (thisDay <= bookingWindowCutoffDate);

                <div class="calendar_day">
                @if(isToday) {
                    <div id="today"></div>
                }
                <div class="calendar_day_number">
                    @if (isWithinBookingWindow && resource.IsEnabled) {
                        <a class="@(isToday ? "calendar_day_number_today" : "")" href="/Resources/@(resource.Id)/Book/@(_startDate.Year)/@(_startDate.Month)/@(dayCounter)">@dayCounter</a>
                    } else {
                        <span class="dim">@dayCounter</span>
                    }
                </div>
                <div class="calendar_day_name">
                    @(@thisDay.DayOfWeek.ToString())
                </div>
                @if(bookingsThisMonth.ContainsKey(dayCounter)) {
                    @foreach(SingleBooking booking in bookingsThisMonth[dayCounter].OrderBy(x => x.StartTimeUTC.Hour).ThenBy(x => x.StartTimeUTC.Minute))
                    {
                        <div class="calendar_item_preview">
                                <div class="calendar_item_preview_time">@(booking.StartTimeUTC.ToString("h:mm"))-@(booking.EndTimeUTC.ToString("h:mm"))</div>
                                <div class="calendar_item_preview_description">
                                    <a href="/Resources/@(resource.Id)/Booking/@(booking.Id)">@(booking.ShortDescription)</a>
                                </div>

                        </div>
                    }
                }
                </div>
            } else {
                <div class="calendar_day_nomonth">
                </div>
            }
            dayCounter++;
        }
    }
    </div>
</div>
