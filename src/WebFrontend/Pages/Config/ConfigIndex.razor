@page "/Config"
@using System.Security.Claims
@using LSSD.Bookings
@using Microsoft.Extensions.Configuration
<AuthorizeView>
    <Authorized>
        @code {
            [Inject]
            ResourceService _resourceService { get; set; }

            [Inject]
            ResourceGroupService _resourceGroupService { get; set; }

            [Inject]
            IConfiguration Configuration { get; set; }
        }

        @if (!context.User.Claims.Select(x => x.Value).Contains(Configuration["OIDC:AdminGroupID"])) {
            <WebFrontend.Components.AccessDeniedComponent />
        } else {

        <div class="page">

            <div class="section">
            <h1>Configure Resource Groups</h1>
            <a class="btn btn-outline-primary" href="/Config/ResourceGroups/New">New Resource Group</a><br/><br/>

            <table class="table">
                <thead>
                    <th>Name</th>
                    <th>Description</th>
                </thead>
                <tbody>
                @foreach(ResourceGroup resourceGroup in _resourceGroupService.GetAll())
                {
                    <tr>
                        <td><a href="/Config/ResourceGroups/@(resourceGroup.Id.ToString())">@resourceGroup.Name</a></td>
                        <td>@resourceGroup.Description</td>
                    </tr>
                }
                </tbody>
            </table>

            </div>
        <br/><br/>
        <div class="section">
            <h1>Configure Resources</h1>
            <a class="btn btn-outline-primary" href="/Config/Resources/New">New Resource</a><br/><br/>

            <table class="table">
                <thead>
                    <th>Group</th>
                    <th>Name</th>
                    <th>Description</th>
                </thead>
                <tbody>
                @{
                    Dictionary<string, List<Resource>> resourcesByGroup = new Dictionary<string, List<Resource>>();
                    foreach(Resource resource in _resourceService.GetAll())
                    {
                        bool foundGroup = false;
                        foreach(ResourceGroup group in _resourceGroupService.GetAll())
                        {
                            if (resource.GroupGUID == group.Id)
                            {
                                if (!resourcesByGroup.ContainsKey(group.Name))
                                {
                                    resourcesByGroup.Add(group.Name, new List<Resource>());
                                }
                                resourcesByGroup[group.Name].Add(resource);
                                foundGroup = true;
                            }
                        }

                        if (!foundGroup)
                        {
                            if (!resourcesByGroup.ContainsKey("No Group")) {
                                resourcesByGroup.Add("No Group", new List<Resource>());
                            }
                            resourcesByGroup["No Group"].Add(resource);
                        }

                    }
                }

                @foreach(string groupName in resourcesByGroup.Keys.OrderBy(x => x))
                {
                    @foreach(Resource resource in resourcesByGroup[groupName].OrderBy(x => x.Name))
                    {
                        <tr>
                            <td>@groupName</td>
                            <td><a href="/Config/Resources/@(resource.Id.ToString())">@resource.Name</a>
                                @if(!resource.IsEnabled)
                                {
                                    <i> (DISABLED)</i>
                                }
                            </td>
                            <td>@resource.Description</td>
                        </tr>
                    }

                }


                </tbody>
            </table>
        </div>
        </div>
        }
    </Authorized>
    <NotAuthorized>
        <WebFrontend.Components.LogInComponent />
    </NotAuthorized>
</AuthorizeView>
