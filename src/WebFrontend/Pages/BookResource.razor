@page "/Resources/{resourceguid}/Book"
@page "/Resources/{resourceguid}/Book/{year:int}/{month:int}/{day:int}"
@using LSSD.Bookings
@using System.Security.Claims
@using Microsoft.Extensions.Configuration

@code {

    [Inject]
    ResourceService _resourceService { get; set; }

    [Inject]
    BookingService _bookingService { get; set; }

    [Inject]
    IConfiguration _configuration { get; set; }

    [Inject]
    NavigationManager NavigationManager { get; set; }

    [Parameter]
    public string resourceguid { get; set; }

    [Parameter]
    public int year { get; set; } = DateTime.Today.Year;

    [Parameter]
    public int month { get; set; } = DateTime.Today.Month;

    [Parameter]
    public int day { get; set; } = DateTime.Today.Day;

    Resource selectedResource = null;
    List<SingleBooking> thisResourceBookings = new List<SingleBooking>();

    SingleBooking newBooking = new SingleBooking();

    protected override void OnInitialized()
    {
        if (resourceguid != null)
        {
            selectedResource = _resourceService.Get(resourceguid);

            if (year == 0) {
                year = DateTime.Today.Year;
            }

            if (month == 0) {
                month = DateTime.Today.Month;
            }

            if (day == 0) {
                day = DateTime.Today.Day;
            }

            newBooking = new SingleBooking() {
                DurationMinutes = selectedResource.DefaultBookingMinutes > 0 ? selectedResource.DefaultBookingMinutes : 60,
                StartHourUTC = 8,
                StartMinuteUTC = 0,
                BookingDate = new DateTime(year, month, day),
                ResourceGUID = selectedResource.Id
            };

            // Load bookings for this resource on this day
            thisResourceBookings = _bookingService.Find(x =>
                    x.ResourceGUID == selectedResource.Id &&
                    x.BookingDate.Year == newBooking.BookingDate.Year &&
                    x.BookingDate.Month == newBooking.BookingDate.Month &&
                    x.BookingDate.Day == newBooking.BookingDate.Day &&
                    x.IsCancelled == false
                    ).ToList();

        }
    }


    protected void HandleValidSubmit()
    {

        newBooking.CreatedUTC = DateTime.Now.ToUniversalTime();

        // Save the data
        thisResourceBookings.Add(newBooking);
        _bookingService.Insert(newBooking);

        // Navigate back to resource view
        OnClick_Back();
    }

    protected void HandleInValidSubmit()
    {
        // Do nothing
    }

    protected void OnClick_Back()
    {
        NavigationManager.NavigateTo($"/Resources/{resourceguid}/{year}/{month}");
    }
}

@if(selectedResource == null) {
    <p>Resource not found</p>
} else {

<AuthorizeView>
    @* EditForm interferes with the "context" property so we need to rename it to something else if there is an EditForm directly inside it *@
    <Authorized Context="Auth">
        @{
            newBooking.BookedByName = Auth.User.Identity.Name;
            string objectId = "";
            bool userCanAccessThisResource = false;
            foreach(Claim claim in Auth.User.Claims)
            {
                foreach(KeyValuePair<string, string> property in claim.Properties)
                {
                    if (property.Value == "oid")
                    {
                        objectId = claim.Value;
                    }
                }

                if (claim.Type == "groups")
                {
                    if (selectedResource.OIDC_CanEditBookings.Contains(claim.Value) || selectedResource.OIDC_CanViewResource.Contains(claim.Value))
                    {
                        userCanAccessThisResource = true;
                    }

                    if (!string.IsNullOrEmpty(_configuration["OIDC:AdminGroupID"]))
                    {
                        if (_configuration["OIDC:AdminGroupID"] == claim.Value)
                        {
                            userCanAccessThisResource = true;
                        }
                    }
                }

            }
            newBooking.BookedByObjectId = objectId;


        }
        <h1>@selectedResource.Name</h1>
        <p>
        [<a href="/Resources/@(selectedResource.Id.ToString())/@(year)/@(month)">Back</a>]<br/>
        </p>

        @if (userCanAccessThisResource) {

        <div class="book_resource_page_container">

            <div class="book_resource_form">
                <h2>Create new booking</h2>
                <EditForm Model="newBooking" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <WebFrontend.Components.SingleBookingEditComponent Booking="@newBooking" BookableResource="@selectedResource" />
                    <div class="form-group">
                        <div class="form-row">
                            <div class="col">
                                <button type="submit" class="btn btn-primary btn-block">Create booking</button>
                            </div>
                            <div class="col">
                                <button type="button" @onclick="OnClick_Back" class="btn btn-secondary btn-block">Cancel and go back</button>
                            </div>
                        </div>
                    </div>
                </EditForm>
                <div class="card bg-warning mb-3">
                <div class="card-body">
                    <h5 class="card-title">Why no multi-day bookings?</h5>
                    <p class="card-text">Multi-day bookings and recurring bookings are not currently supported. If you require a resource for multiple days, please create a booking on each day that you need it.</p>
                </div>
                </div>

            </div>




            <div class="book_resource_calendar">
                <h3>@(newBooking.BookingDate.ToString("dddd, MMMM dd, yyyy"))</h3>
                <div class="daycalendar_day">
                @for(int hour=6;hour<24;hour++) {
                    <div class="daycalendar_hour_block">
                        <div class="daycalendar_day_hour daycalendar_first_hour">
                            <div class="daycalendar_day_hour_label">@(hour > 12 ? (hour - 12) : hour):00 @(hour > 12 ? "pm" : "am") </div>
                        </div>
                        <div class="daycalendar_day_hour daycalendar_second_hour">
                            <div class="daycalendar_day_hour_label">@(hour > 12 ? (hour - 12) : hour):30 @(hour > 12 ? "pm" : "am")</div>
                        </div>
                        <div style="position: absolute; top: 0; left: 60px;">
                            @foreach(SingleBooking booking  in thisResourceBookings.Where(x => x.StartTimeUTC.Hour == @hour))
                            {
                                <div class="daycalendar_event" style="top: @((booking.StartTimeUTC.Minute/15)*13)px; height:@((booking.DurationMinutes/15)*13)px">
                                    <b>@booking.ShortDescription</b><br/>
                                    @(booking.StartTimeUTC.ToString("h:mm")) to @(booking.EndTimeUTC.ToString("h:mm"))
                                </div>
                            }
                        </div>
                    </div>
                }
                </div>
            </div>


        </div>
        } else {
            <i>Sorry, you do not have access to this resource</i>
        }
    </Authorized>
</AuthorizeView>
}